#lesson 1
bitcoin 
ethereum
Decentralized agreement
Decentralized Transaction
Decentralized Organisations (DAO: Decentralized Autonomous Organisations)
    smart contracts is a set of instructions executed in a decentralised wway without 
    the need for a centrailzed or third party intermedialry

Decentralized Oracle Network (DON)
web3: permissionless, decentralized, dynamic data.
        -immutable -decentralized -transparent.

Lesson 2.
wallet essentials: public key, private key, seed phase. 
Gas: A unit of ccomputational measurement. Thee more complex your transaction is the more
    gass you have to pay.
HOW THE BLOCK CHAIN WORKS
SHA256 hash.
ethererum: uses the keccak256 hash algorithm
HASH ALGORITHM: A function that computess data into a unique hash.
Hash: A unique fixeed length string, meant to identify a piece of data, 
    they aree created by placcing said dtat into a "hash function"
Genesis Blok: the first block in a blockhain
Mining: The proeess of finding the solution to the blockchain "problem"
In our example, the prooblem was to find a hash that starts with four zeros.
Nodes get paid for minning blocks.
Nonce: A "number" used one to find the "solution" to the blockchain prooblem.
It's also used to define the transcation number for an acccount/address.
private key: only known to the key holdeer, it's used to "sign" transations
public key: is derived from your private key. Anyone can "see" it and use it to 
    verify that a transaction came fro you.
    Node: a single instane in a deecentralized network.

blockchain consensus mechanism
1. chain selection:
2. sybil resistance PoW (proof of work)
    PoS (proof of stake)
    chain seelection rule:  Nakamoto consensus: combination of PoW and longest chain. the longest chain.
    block confirmations number of chains ahead of it in the chain.

ETH 2.0 prove of stake.

block reward and transaction  fees: prices won by the Node.

types of blockchain attacks.
===========================
1. sybil Attack: the attacker hass to hass to create a lots of account and node in other
    to take over the network is is economically imposssible because it has to over
    still do the work or have a stake to make this happen.
2. 51% Attack: if you have the longest chain and it matches up with more 51% of the network
    then the chain can be forked to your chain.

Proof of work cost a lot of eelectricity.
PoS: chains already using pow eg. avalache, polygon, phantom etc.
    proof of stake nodes put up collateral as a sybil resistance mechanism.
validators: (miners are noow called validators)
Randomness: 
Pros of PoW: great mecchanism against Sybil attack.
            easy to proof who the author of a new block is.
            less complicated i.e uses much less energy.
            Scalability: gas price may keep rising has more ppl join the use of blockchain
            sharding: main chain that coordinate a lot  of other micro chain.

Layer 1: Base layer blockchain implementation. e.g bitcoin, ethereeum, avalanche. 
Layer 2: Any application built on top of layer 1. eg. chainlink, abitrum, optimism (rollup) ssolve some of the 
    leyer problems.


SOLIDITY
NOTE: all solidity expressions or line of code ends with a semi colon (;).
1. licence definition
//SPDX-License-Identifier: MIT
2. then solidity definition
pragma solidity 0.8.8; // solidity version
verionns ^0.8.8 (will be compatible with version equal or greater than 0.8.8, => ) 
3. defining our contract function. 
    Contract contactName {
        // other part f the contract code are within the coily braces
    }
4. Basic solidity types.
    a. boolean 
    b. uint: unit are of different types: uint8 (least)- uint256 (max)
    c. int (interger, a non negative number)
    d. address (wallet address, contract address ...)
    e. bytes (bytes32 - ...)
    f. string
    Contract contactName {
        // other part f the contract code are within the coily braces
        uint256 favNumber = 5;
        string favText = "Five";
        int256 favInt = 5;
        address myAddress = 0x10...;
        bytes32 favBytes = "cat"; 
    }
function visiblity specifier(4)
1. public
2. private
3. external
4. internal

Scope
1. global

view and pure funtions when used alone does not spend gas.
view and pure functions disallow any modification of state.
pure functions additionally disallow you from to read from blockchain state.
if a gas costing function calls a view or pure function - only then will it cost gas

BASIC SOLIDITY ARRAY AND STRUCT
STRUCT is creating a new type of structure that we want inform of 
    struct People{
        uint256 favNumber;
        string name;
    }

ARRAY: an array is a data structure that holds a list of other types.
dynamic array vs fixed sized array.
dynamic array [] is the array whose size is not specify while fixed size array [3] 
(can only take a maximum of 3) is otherwise.

BASIC SOLIDITY ERRORS AND WARNINGS
Warnings wont stop your code from compiling (color in yellow), errors means your code didn't compile at i.e 
not working has expected and you should fixed the error (color in red) 

BASIC SOLIDITY, MEMORY, STORAGE, AND CALLDATA.
places you can store  data in solidity.
EVM overview.
1. stack
2. Memory
3. Storage 
4. Calldata
5. code
6. logs

calldata and memory means that this data is only temporary and will only exist during the transaction
in whih the function is called. 
storage variable persist even after the transaction is complete.
calldata is a temporary stored variable that can not be modified. 
memory is a temporary stored variable that can be modified. 

MAPPING: is a data structure in where a key is mapped to a single variable.

EVM: Ethereum Virtue Machine.
avalache, polygon, Fantom

lesson3
the ability of smart contract to interact wwwith eachother is called composability.
smart contracts a composable
you can import smart contract through the file system.
## import "./filename.sol" 

interaccting with other smart contracts
to interact with annother contract we need the Address and the ABI (application Binary Interface)

Contracts can inherit contracts (thereby innheeriting all the functions of the parent contract), 
all you need do is to import the parent funtion and the child contract deleared as the parent contract.

functions inn the parent contract can be override in the child contract: to do this you have to;
define the parent function as virtual and child contract as override.

fund me project.
every transaction on ethereum have the following fields.
=================================
transaction - value Transfer.
=================================
1. Nounce: txx for the account.
2. Gas Price: price per unit gas (wei)
3. Gas Limit: 21000
4. To: address that the tx is sennt to.
5. value: amount in wei to spend
6. Data: empty
7 v, r, s : compoent of tx signature.

=================================
transaction - funcction call.
=================================
NB: Smart contacts can hold fundss just like how wallet can.

//reset. the array
        funders = new address[](0)

        //sending the ethereum/ native tokenns inn an address. call is the most prefered way for now.
        // 1. transfer
        payable(msg.sender).transfer(address(this).balance);
        // 2. send
        bool sendSuccess = payable(msg.sender).send(address(this).balance);
        require(sendSuccess, "Send failed");
        // 3. call
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("")
        require(callSuccess, "Call failed")

solidity constructor.


solidity mofifier
modifier onlyOwner {
        require(msg.sender == owner, "sender is not owner");
        _;
    }

Advanced solidity: immutable annd constant.
make the gas more gas efficient.
constant keyword and immutable keyword


Advance solidity: custom errors
* revert: this can be used in place of require to be more gas efficient.
e.g error NotOwner()
if (msg.sender == i_owner) {revert NotOwner();}

Advance solidity: receieve and fallback 

how to find solution to bugs.
//limit tinkering / triggering 20 minutes.
// take at least 15 minutes yourself => or be 100% sure.
// you exhusted all options.

// 1. Tinker and try to pinpoint exactly what's going on
// 2. Google the exact error
// 3. Go to our Gitbub repo discussion and/or updates
// 4. Ask a question on a forum like slack exchange ETH and stack overflow.